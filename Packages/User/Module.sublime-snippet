<snippet>
    <content><![CDATA[/**
 * @fileOverview ${1:ObjectName} Module File
 *
 * @author $TM_FULLNAME
 * @version 1.0
 */
(function(${2:}) {
    'use strict';

    /**
     * Description
     *
     * @name ${1:ObjectName}
     * @class ${1:ObjectName} short description
     * @constructor
     *
     * @since 1.0
     */
    var ${1:ObjectName} = function() {
        this.init();
    };

    /**
     * Initializes the UI Component View
     * Runs a single setupHandlers call, followed by createChildren and layout
     *
     * @returns {${1:ObjectName}}
     * @since 1.0
     */
    ${1:ObjectName}.prototype.init = function() {
        this.isEnabled = false;

        return this.setupHandlers()
                   .enable();
    };

    /**
     * Binds the scope of any handler functions
     * Should only be run on initialization of the view
     *
     * @returns {${1:ObjectName}}
     * @since 1.0
     */
    ${1:ObjectName}.prototype.setupHandlers = function() {
        // Bind event handlers scope here
        // this.onClickHandler = \$.proxy(this.onClick, this);
        // this.onClickHandler = this.onClick.bind(this);

        return this;
    };

    /**
     * Enables the module
     * Performs any event binding to handlers
     * Exits early if it is already enabled
     *
     * @returns {${1:ObjectName}}
     * @since 1.0
     */
    ${1:ObjectName}.prototype.enable = function() {
        if (this.isEnabled) {
            return this;
        }

        this.isEnabled = true;

        // Setup any event handlers

        return this;
    };

    /**
     * Disables the view
     * Tears down any event binding to handlers
     * Exits early if it is already disabled
     *
     * @returns {${1:ObjectName}}
     * @since 1.0
     */
    ${1:ObjectName}.prototype.disable = function() {
        if (!this.isEnabled) {
            return this;
        }

        this.isEnabled = false;

        // Tear down any event handlers

        return this;
    };

    /**
     * Destroys the module
     * Tears down any events, handlers, elements
     * Should be called when the object should be left unused
     *
     * @returns {${1:ObjectName}}
     * @since 1.0
     */
    ${1:ObjectName}.prototype.destroy = function() {
        this.disable();
        
        return this;
    };

    // Return the module, or set to a namespace
    // Namespace.${1:ObjectName} = ${1:ObjectName};
    // return ${1:ObjectName};
}(${2:}));]]></content>
    <tabTrigger>njs-module</tabTrigger>
    <scope>source.js</scope>
    <description>Raw Module Javascript Template</description>
</snippet>
